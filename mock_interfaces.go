// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/runsqs/v2 (interfaces: SQSProducer)

// Package mocks is a generated GoMock package.
package runsqs

import (
	context "context"
	reflect "reflect"

	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	gomock "github.com/golang/mock/gomock"
)

// MockSQSProducer is a mock of SQSProducer interface.
type MockSQSProducer struct {
	ctrl     *gomock.Controller
	recorder *MockSQSProducerMockRecorder
}

// MockSQSProducerMockRecorder is the mock recorder for MockSQSProducer.
type MockSQSProducerMockRecorder struct {
	mock *MockSQSProducer
}

// NewMockSQSProducer creates a new mock instance.
func NewMockSQSProducer(ctrl *gomock.Controller) *MockSQSProducer {
	mock := &MockSQSProducer{ctrl: ctrl}
	mock.recorder = &MockSQSProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSProducer) EXPECT() *MockSQSProducerMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockSQSProducer) SendMessage(arg0 context.Context, arg1 *sqs.SendMessageInput, arg2 ...func(*sqs.Options)) (*sqs.SendMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*sqs.SendMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSQSProducerMockRecorder) SendMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSQSProducer)(nil).SendMessage), varargs...)
}

// SendMessageBatch mocks base method.
func (m *MockSQSProducer) SendMessageBatch(arg0 context.Context, arg1 *sqs.SendMessageBatchInput, arg2 ...func(*sqs.Options)) (*sqs.SendMessageBatchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageBatch", varargs...)
	ret0, _ := ret[0].(*sqs.SendMessageBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageBatch indicates an expected call of SendMessageBatch.
func (mr *MockSQSProducerMockRecorder) SendMessageBatch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageBatch", reflect.TypeOf((*MockSQSProducer)(nil).SendMessageBatch), varargs...)
}
