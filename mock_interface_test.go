// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package runsqs is a generated GoMock package.
package runsqs

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSQSConsumer is a mock of SQSConsumer interface
type MockSQSConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockSQSConsumerMockRecorder
}

// MockSQSConsumerMockRecorder is the mock recorder for MockSQSConsumer
type MockSQSConsumerMockRecorder struct {
	mock *MockSQSConsumer
}

// NewMockSQSConsumer creates a new mock instance
func NewMockSQSConsumer(ctrl *gomock.Controller) *MockSQSConsumer {
	mock := &MockSQSConsumer{ctrl: ctrl}
	mock.recorder = &MockSQSConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQSConsumer) EXPECT() *MockSQSConsumerMockRecorder {
	return m.recorder
}

// StartConsuming mocks base method
func (m *MockSQSConsumer) StartConsuming(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConsuming", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartConsuming indicates an expected call of StartConsuming
func (mr *MockSQSConsumerMockRecorder) StartConsuming(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsuming", reflect.TypeOf((*MockSQSConsumer)(nil).StartConsuming), ctx)
}

// StopConsuming mocks base method
func (m *MockSQSConsumer) StopConsuming(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopConsuming", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopConsuming indicates an expected call of StopConsuming
func (mr *MockSQSConsumerMockRecorder) StopConsuming(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopConsuming", reflect.TypeOf((*MockSQSConsumer)(nil).StopConsuming), ctx)
}

// GetSQSMessageConsumer mocks base method
func (m *MockSQSConsumer) GetSQSMessageConsumer() SQSMessageConsumer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQSMessageConsumer")
	ret0, _ := ret[0].(SQSMessageConsumer)
	return ret0
}

// GetSQSMessageConsumer indicates an expected call of GetSQSMessageConsumer
func (mr *MockSQSConsumerMockRecorder) GetSQSMessageConsumer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQSMessageConsumer", reflect.TypeOf((*MockSQSConsumer)(nil).GetSQSMessageConsumer))
}

// MockSQSMessageConsumer is a mock of SQSMessageConsumer interface
type MockSQSMessageConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockSQSMessageConsumerMockRecorder
}

// MockSQSMessageConsumerMockRecorder is the mock recorder for MockSQSMessageConsumer
type MockSQSMessageConsumerMockRecorder struct {
	mock *MockSQSMessageConsumer
}

// NewMockSQSMessageConsumer creates a new mock instance
func NewMockSQSMessageConsumer(ctrl *gomock.Controller) *MockSQSMessageConsumer {
	mock := &MockSQSMessageConsumer{ctrl: ctrl}
	mock.recorder = &MockSQSMessageConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQSMessageConsumer) EXPECT() *MockSQSMessageConsumerMockRecorder {
	return m.recorder
}

// ConsumeMessage mocks base method
func (m *MockSQSMessageConsumer) ConsumeMessage(ctx context.Context, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeMessage indicates an expected call of ConsumeMessage
func (mr *MockSQSMessageConsumerMockRecorder) ConsumeMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockSQSMessageConsumer)(nil).ConsumeMessage), ctx, message)
}

// MockSQSProducer is a mock of SQSProducer interface
type MockSQSProducer struct {
	ctrl     *gomock.Controller
	recorder *MockSQSProducerMockRecorder
}

// MockSQSProducerMockRecorder is the mock recorder for MockSQSProducer
type MockSQSProducerMockRecorder struct {
	mock *MockSQSProducer
}

// NewMockSQSProducer creates a new mock instance
func NewMockSQSProducer(ctrl *gomock.Controller) *MockSQSProducer {
	mock := &MockSQSProducer{ctrl: ctrl}
	mock.recorder = &MockSQSProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQSProducer) EXPECT() *MockSQSProducerMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method
func (m *MockSQSProducer) ProduceMessage(message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage
func (mr *MockSQSProducerMockRecorder) ProduceMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockSQSProducer)(nil).ProduceMessage), message)
}
